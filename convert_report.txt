/* Convert Report generated by PDK at 2017-12-14 17:06:13 +0100 */


--- metadata.json	2017-12-14 17:05:12.529240605 +0100
+++ metadata.json.pdknew	2017-12-14 17:06:13.755996000 +0100
@@ -4,16 +4,21 @@
   "author": "kreeuwijk",
   "summary": "Install VMware Tools for Windows on VMware guests.",
   "license": "Apache-2.0",
+  "source": "https://github.com/kreeuwijk/vmtools_win.git",
   "project_page": "https://github.com/kreeuwijk/vmtools_win",
   "issues_url": "https://github.com/kreeuwijk/vmtools_win/issues",
-  "tags": [ "virtualization", "vmware", "vmware-tools", "vmware_tools", "vmtools" ],
-  "source": "https://github.com/kreeuwijk/vmtools_win.git",
   "dependencies": [
+
   ],
   "operatingsystem_support": [
     {
       "operatingsystem": "Windows",
-      "operatingsystemrelease": [ "2008 r2", "2012", "2012 R2", "2016" ]
+      "operatingsystemrelease": [
+        "2008 r2",
+        "2012",
+        "2012 R2",
+        "2016"
+      ]
     }
   ],
   "requirements": [
@@ -21,6 +26,15 @@
       "name": "puppet",
       "version_requirement": ">=4.7.0 <6.0.0"
     }
-  ]
+  ],
+  "tags": [
+    "virtualization",
+    "vmware",
+    "vmware-tools",
+    "vmware_tools",
+    "vmtools"
+  ],
+  "template-url": "file:///opt/puppetlabs/pdk/share/cache/pdk-templates.git",
+  "template-ref": "heads/master-0-gf513a64"
 }


--- Gemfile	2017-12-14 17:05:12.526688183 +0100
+++ Gemfile.pdknew	2017-12-14 17:06:13.761735000 +0100
@@ -1,4 +1,127 @@
-source "https://rubygems.org"
+source ENV['GEM_SOURCE'] || 'https://rubygems.org'
 
-gem 'puppet', ENV['PUPPET_GEM_VERSION'], :require => false
+def location_for(place_or_version, fake_version = nil)
+  if place_or_version =~ %r{\A(git[:@][^#]*)#(.*)}
+    [fake_version, { git: Regexp.last_match(1), branch: Regexp.last_match(2), require: false }].compact
+  elsif place_or_version =~ %r{\Afile:\/\/(.*)}
+    ['>= 0', { path: File.expand_path(Regexp.last_match(1)), require: false }]
+  else
+    [place_or_version, { require: false }]
+  end
+end
+
+def gem_type(place_or_version)
+  if place_or_version =~ %r{\Agit[:@]}
+    :git
+  elsif !place_or_version.nil? && place_or_version.start_with?('file:')
+    :file
+  else
+    :gem
+  end
+end
+
+ruby_version_segments = Gem::Version.new(RUBY_VERSION.dup).segments
+minor_version = ruby_version_segments[0..1].join('.')
+
+group :development do
+  gem "fast_gettext", '1.1.0',                         require: false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.1.0')
+  gem "fast_gettext",                                  require: false if Gem::Version.new(RUBY_VERSION.dup) >= Gem::Version.new('2.1.0')
+  gem "json_pure", '<= 2.0.1',                         require: false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.0.0')
+  gem "json", '= 1.8.1',                               require: false if Gem::Version.new(RUBY_VERSION.dup) == Gem::Version.new('2.1.9')
+  gem "puppet-module-posix-default-r#{minor_version}", require: false, platforms: [:ruby]
+  gem "puppet-module-posix-dev-r#{minor_version}",     require: false, platforms: [:ruby]
+  gem "puppet-module-win-default-r#{minor_version}",   require: false, platforms: [:mswin, :mingw, :x64_mingw]
+  gem "puppet-module-win-dev-r#{minor_version}",       require: false, platforms: [:mswin, :mingw, :x64_mingw]
+end
+
+puppet_version = ENV['PUPPET_GEM_VERSION']
+puppet_type = gem_type(puppet_version)
+facter_version = ENV['FACTER_GEM_VERSION']
+hiera_version = ENV['HIERA_GEM_VERSION']
+
+def puppet_older_than?(version)
+  puppet_version = ENV['PUPPET_GEM_VERSION']
+  !puppet_version.nil? &&
+    Gem::Version.correct?(puppet_version) &&
+    Gem::Requirement.new("< #{version}").satisfied_by?(Gem::Version.new(puppet_version.dup))
+end
+
+gems = {}
+
+gems['puppet'] = location_for(puppet_version)
+
+# If facter or hiera versions have been specified via the environment
+# variables, use those versions. If not, and if the puppet version is < 3.5.0,
+# use known good versions of both for puppet < 3.5.0.
+if facter_version
+  gems['facter'] = location_for(facter_version)
+elsif puppet_type == :gem && puppet_older_than?('3.5.0')
+  gems['facter'] = ['>= 1.6.11', '<= 1.7.5', require: false]
+end
+
+if hiera_version
+  gems['hiera'] = location_for(ENV['HIERA_GEM_VERSION'])
+elsif puppet_type == :gem && puppet_older_than?('3.5.0')
+  gems['hiera'] = ['>= 1.0.0', '<= 1.3.0', require: false]
+end
+
+if Gem.win_platform? && (puppet_type != :gem || puppet_older_than?('3.5.0'))
+  # For Puppet gems < 3.5.0 (tested as far back as 3.0.0) on Windows
+  if puppet_type == :gem
+    gems['ffi'] =            ['1.9.0',                require: false]
+    gems['minitar'] =        ['0.5.4',                require: false]
+    gems['win32-eventlog'] = ['0.5.3',    '<= 0.6.5', require: false]
+    gems['win32-process'] =  ['0.6.5',    '<= 0.7.5', require: false]
+    gems['win32-security'] = ['~> 0.1.2', '<= 0.2.5', require: false]
+    gems['win32-service'] =  ['0.7.2',    '<= 0.8.8', require: false]
+  else
+    gems['ffi'] =            ['~> 1.9.0',             require: false]
+    gems['minitar'] =        ['~> 0.5.4',             require: false]
+    gems['win32-eventlog'] = ['~> 0.5',   '<= 0.6.5', require: false]
+    gems['win32-process'] =  ['~> 0.6',   '<= 0.7.5', require: false]
+    gems['win32-security'] = ['~> 0.1',   '<= 0.2.5', require: false]
+    gems['win32-service'] =  ['~> 0.7',   '<= 0.8.8', require: false]
+  end
+
+  gems['win32-dir'] = ['~> 0.3', '<= 0.4.9', require: false]
+
+  if RUBY_VERSION.start_with?('1.')
+    gems['win32console'] = ['1.3.2', require: false]
+    # sys-admin was removed in Puppet 3.7.0 and doesn't compile under Ruby 2.x
+    gems['sys-admin'] =    ['1.5.6', require: false]
+  end
+
+  # Puppet < 3.7.0 requires these.
+  # Puppet >= 3.5.0 gem includes these as requirements.
+  # The following versions are tested to work with 3.0.0 <= puppet < 3.7.0.
+  gems['win32-api'] =           ['1.4.8', require: false]
+  gems['win32-taskscheduler'] = ['0.2.2', require: false]
+  gems['windows-api'] =         ['0.4.3', require: false]
+  gems['windows-pr'] =          ['1.2.3', require: false]
+elsif Gem.win_platform?
+  # If we're using a Puppet gem on Windows which handles its own win32-xxx gem
+  # dependencies (>= 3.5.0), set the maximum versions (see PUP-6445).
+  gems['win32-dir'] =      ['<= 0.4.9', require: false]
+  gems['win32-eventlog'] = ['<= 0.6.5', require: false]
+  gems['win32-process'] =  ['<= 0.7.5', require: false]
+  gems['win32-security'] = ['<= 0.2.5', require: false]
+  gems['win32-service'] =  ['<= 0.8.8', require: false]
+end
+
+gems.each do |gem_name, gem_params|
+  gem gem_name, *gem_params
+end
+
+# Evaluate Gemfile.local and ~/.gemfile if they exist
+extra_gemfiles = [
+  "#{__FILE__}.local",
+  File.join(Dir.home, '.gemfile'),
+]
+
+extra_gemfiles.each do |gemfile|
+  if File.file?(gemfile) && File.readable?(gemfile)
+    eval(File.read(gemfile), binding)
+  end
+end
+# vim: syntax=ruby


--- .travis.yml	2017-12-14 17:05:12.526505480 +0100
+++ .travis.yml.pdknew	2017-12-14 17:06:13.763219000 +0100
@@ -1,21 +1,45 @@
 ---
-language: ruby
 sudo: false
-script: puppet parser validate .
+dist: trusty
+language: ruby
+cache: bundler
+before_install:
+  - bundle -v
+  - rm Gemfile.lock || true
+  - gem update --system
+  - gem update bundler
+  - gem --version
+  - bundle -v
+script:
+  - 'bundle exec rake $CHECK'
+bundler_args: --without system_tests
+rvm:
+  - 2.4.1
+  - 2.1.9
+env:
+  - PUPPET_GEM_VERSION="~> 4.0" CHECK=spec
 matrix:
   fast_finish: true
   include:
-  - rvm: 2.1.9
-    env: PUPPET_GEM_VERSION="~> 4.7.0"
-  - rvm: 2.3.1
-    env: PUPPET_GEM_VERSION="~> 4.8.0"
-  - rvm: 2.3.1
-    env: PUPPET_GEM_VERSION="~> 4.9.0"
-  - rvm: 2.3.1
-    env: PUPPET_GEM_VERSION="~> 4.10.0"
-  - rvm: 2.4.0
-    env: PUPPET_GEM_VERSION="~> 5.0"
+    -
+      env: CHECK=rubocop
+    -
+      env: CHECK="syntax lint"
+    -
+      env: CHECK=metadata_lint
+branches:
+  only:
+    - master
+    - /^v\d/
 notifications:
-  email:
-    - kevinr@puppet.com
+  email: false
+deploy:
+  provider: puppetforge
+  user: puppet
+  password:
+    secure: ""
+  on:
+    tags: true
+    all_branches: true
+    condition: "$DEPLOY_TO_FORGE = yes"